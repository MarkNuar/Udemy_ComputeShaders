- Compute Shader:
    Contains one or more Kernels 
    Kernels can be called from a MonoBehavior scripts using a Dispatch method 
    All Kernels need a #pagma kernel [name]

- Dispatch: 
    Dispatch(kernelIndex, X, Y, Z);
        This way we dispatch X*Y*Z groups (works): 
            X along the horizontal direction 
            Y along the vertical direction 
            Z along the depth direction 
        Each group is identified by a GroupID, whose values range from (0,0,0) to (X-1, Y-1, Z-1).
        Each group contains 1 ore more threads, as defined in the numthreads header 

        numthreads(x,y,z) means that each group contains 8 threads in the x dimension, 8 in the y, and 1 in the z dimension.
        Each thread is identified by a ThreadId, whose values range from (0,0,0) to (x-1,y-1,z-1) (different from the XYZ in the GroupID!)

        Finally, the DispatchThreadID is computed in the following way: 
            DispatchThreadID = GroupID * (x,y,z) + ThreadId;

- Index in threads: 
        [numthreads(8,8,1)] // 64 threads = 8 * 8 * 1
        void CSMain (uint3 id : SV_DispatchThreadID)

    id is the index in the 3 dimensional matrix of dimension 8x8x1
    Each dimension has index starting form 0 
        x : 0 - 7
        y : 0 - 7
        z : 0 (only one in the previous definition)
    
    0,0,0 corresponds to the lower left corner 
    1,0,0 is the one in the right of the first 
    0,1,0 is the one on top of the first

- Step function:
    step(edge, x) -> 1 if x>=edge, 0 otherwise

- Pass data to the Shader 
    SetInt 
    SetVector (float4)
    SetTexture (RW texture) 
    Buffers 

- Buffers: 
    Buffer of: 
        float 
        float3 
        float4 
        custom structs !!
    
    StructuredBuffer is only write 
    RWStructuredBuffer is also read 
    
    Steps to create a buffer: 
        Setup a custom struct (or base data)
        Create a CPU based array of struct 
        Create a GPU block of memory to pass these value to 
        Populate the GPU memory using the CPU array (buffer.SetData(array))
        If needed, fetch the data from the buffer (buffer.GetData(array)) 

    You can also use buffers to pass data from Shader (GPU) to C# code (CPU) (like producing the positions of the stars)


- Frac function: 
    frac(23.546) = 0.564 -> always a value between 0 and 1 

- Perlin Noise, invented by Ken Perlin for film Tron 

- Smoothstep(min, max, x)
    0 if x < min 
    1 if x > max 
    value between smoothed 

- Out vs Ref: 
    Out param will be initialized inside the function 
    Ref param is already initialized before the call and can be read and written inside the function 

- Post Processing 
    Apply effect on an image, by passing it to the GPU 
    Src Texture (only read from GPU)
    Dest Texture (rw from GPU)

- Blur Effect: 
    Each pixel is a blend between itself and the pixels around -> not exatly, this would be very inefficient (consireding a square of 10 pixels per side, we would perform
    10*10 operations per pixel)
    Instead, first we blur horizontally, then vertically -> 10 + 10 = 20 operations per pixel, much better!

    This is a 2 stage process -> 2 kernels 

- Coordinate systems: 
    In a texture: 
        (0,0) in the left bottom part 
        source.Length.xy in the right top part 
    
- fmod(x,y): 
    Returns the rest of the division between x and y 
    fmod(13,3) = 1 (rest of division of 13 by 3)

- Vertex Shader:
    VS converts into HDC (homogenous device coordinates)
        Front face bottom left (-1,-1,1)
        Back face top right (1,1,-1)
    VS operates on vertices: pos, uv, color, normal 

- Fragment Shader:
    Returns the color value for each pixel
    The values at the pixel are obtained by interpolation between vertices values
    Triangles are drawn if clockwise 

- Custom Particle Effect 
    With particle effect we can instantiate 10000 of instances of low poly meshes
    We can obtain this effect by sharing a buffer between a Computer Shader and a (Vertex Fragment) Shader

- DrawProceduralNow(MeshTopology topology, int vertexCount, int instanceCount)
    topology: the type of topology to be drawn (point, triangle, quadrs, lines, line strips)
    vertexCount: the amount of vertices for each instance 
    instanceCount: number of instances

- Flocking: 
    Member of the flock are called Boids (bird-oids objects)
    Scan the other Boids in a defined radius, then use these 3 rules to update the position and direction:
        Separation: steer to avoid crowding other local boids 
        Alignment: steer towards the average heading of local boids 
        Cohesion: steer towards the average position of local boids  

- Slerp : spehrical linear interpolation 